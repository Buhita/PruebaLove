-- local r1,r2

-- function love.load()
--     --Object = require "classic"
--     --require "shape"
--     local Rectangle = require "rectangle"
--     local Circle = require "circle"
--     r1 = Rectangle(100,100,200,50)
--     r2 = Circle(350,80,40)
-- end

-- function love.update(dt)
--     --r1.update(r1,dt)
--     r1:update(dt)
--     r2:update(dt)
-- end

-- function love.draw()
--     --r1.draw(r1)
--     r1:draw()
--     r2:draw()
-- end

-- --Let's go through all this code one more time.
-- --First we load the library classic with require "classic". Loading this library returns a table, 
-- --and we store this table inside Object. It has the very basics needed to simulate a class. Because 
-- --Lua doesn't have classes, but by using classic we get a very nice imitation of a class.
-- --Next we load shape.lua. In that file we create a new class called Shape. 
-- --We will use this class as a base class for Rectangle and Circle. 
-- --The 2 things that these classes have in common is that they have an x and y property, 
-- --and that it moves horizontally. These similarities is what we put in Shape.
-- --Next we create the Rectangle class. We make it an extension of our base class Shape. 
-- --Inside the :new() function, the constructor, we call the constructor of our base class with 
-- --Rectangle.super.new(self, x, y). We pass self as first argument, so that Shape will use the instance of our blueprint, and not the blueprint itself. We give our rectangle a width and height property, and give it a draw function.
-- --Next we repeat the above, except for a circle. So instead of a width and height we give it a radius property.
-- --Now that we have our classes ready, we can start making instances of these classes. 
-- --With r1 = Rectangle(100, 100, 200, 50) we create an instance of our class Rectangle. 
-- --It is an object made out of our blueprint, and not the blueprint itself. 
-- --Any changes we make to this instance will not affect the class. We update and draw this instance, 
-- --and for that we use a colon (:). This is because we need to pass our instance as first argument, 
-- --and the colon will make Lua do it for us.
-- --And finally we do the same for r2, except we make it a Circle.